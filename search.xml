<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>进程调度算法</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="进程调度算法："><a href="#进程调度算法：" class="headerlink" title="进程调度算法："></a>进程调度算法：</h1><p>根据系统的资源分配策略所规定的资源分配算法；不同的环境调度算法不同。</p>
<h2 id="1-批处理系统"><a href="#1-批处理系统" class="headerlink" title="1.批处理系统"></a>1.批处理系统</h2><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>
<blockquote>
<h3 id="1-1-先来先服务-first-come-first-serverd（FCFS）"><a href="#1-1-先来先服务-first-come-first-serverd（FCFS）" class="headerlink" title="1.1 先来先服务 first-come first-serverd（FCFS）"></a>1.1 先来先服务 first-come first-serverd（FCFS）</h3><blockquote>
<p>非抢占式的调度算法，按照请求的顺序进行调度。<br>当每个进程就绪后，它加入就绪队列。当前正运行的进程停止执行，选择在就绪队列中存在时间最长的进程运行。<br>该算法既可以用于作业调度，也可以用于进程调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p>
</blockquote>
<h3 id="1-2-短作业优先-shortest-job-first（SJF）"><a href="#1-2-短作业优先-shortest-job-first（SJF）" class="headerlink" title="1.2 短作业优先 shortest job first（SJF）"></a>1.2 短作业优先 shortest job first（SJF）</h3><blockquote>
<p>非抢占式的调度算法，按估计运行时间最短的顺序进行调度。从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。<br>长作业有可能会<strong>饿死（不是“死锁”）</strong>，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p>
</blockquote>
<h3 id="1-3-最短剩余时间优先-shortest-remaining-time-next（SRTN）"><a href="#1-3-最短剩余时间优先-shortest-remaining-time-next（SRTN）" class="headerlink" title="1.3 最短剩余时间优先 shortest remaining time next（SRTN）"></a>1.3 最短剩余时间优先 shortest remaining time next（SRTN）</h3><blockquote>
<p>抢占式的调度算法，最短作业优先的抢占式版本。当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程，否则新的进程等待。<strong>存在长进程饥饿的危险。</strong></p>
</blockquote>
</blockquote>
<h2 id="2-交互式系统"><a href="#2-交互式系统" class="headerlink" title="2.交互式系统"></a>2.交互式系统</h2><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p>
<blockquote>
<h3 id="2-1-时间片轮转"><a href="#2-1-时间片轮转" class="headerlink" title="2.1 时间片轮转"></a>2.1 时间片轮转</h3><blockquote>
<p>按 FCFS 的原则将所有就绪进程排成队列。每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。<br>算法的效率和<strong>时间片的大小</strong>有很大关系：<br>进程切换要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间；如果时间片过长，那么实时性就不能得到保证。</p>
</blockquote>
<h3 id="2-2-优先级调度"><a href="#2-2-优先级调度" class="headerlink" title="2.2 优先级调度"></a>2.2 优先级调度</h3><blockquote>
<p>为每个进程分配一个优先级，按优先级进行调度。<br>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p>
</blockquote>
<h3 id="2-3-多级反馈队列"><a href="#2-3-多级反馈队列" class="headerlink" title="2.3 多级反馈队列"></a>2.3 多级反馈队列</h3><blockquote>
<p>公认的一种较好的进程调度算法。<br>若一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。<br>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..(随着优先降低时间片变长)。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次（1 + 2 + 4 + 8 + 16 + 32 + 64 &gt; 100）。<br>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。<br>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>
</blockquote>
</blockquote>
<h2 id="3-实时系统"><a href="#3-实时系统" class="headerlink" title="3.实时系统"></a>3.实时系统</h2><blockquote>
<p>实时系统要求一个请求在一个确定时间内得到响应。<br>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a><br><a href="https://www.cnblogs.com/szitcast/p/10927375.html" target="_blank" rel="noopener">进程常用调度算法</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>进程调度算法</tag>
      </tags>
  </entry>
  <entry>
    <title>进程状态</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h1 id="进程状态："><a href="#进程状态：" class="headerlink" title="进程状态："></a>进程状态：</h1><blockquote>
<ul>
<li>就绪状态（Ready）：等待被调度</li>
<li>运行状态（Running）</li>
<li>阻塞状态（Waiting）：等待资源<h2 id="状态间切换要注意："><a href="#状态间切换要注意：" class="headerlink" title="状态间切换要注意："></a><strong>状态间切换要注意：</strong></h2></li>
</ul>
<ol>
<li>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。</li>
<li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。</li>
</ol>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>进程状态</tag>
      </tags>
  </entry>
  <entry>
    <title>进程与线程</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%20/</url>
    <content><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h2><blockquote>
<ol>
<li>操作系统对正在运行的程序的一种抽象，程序是指令、数据及其组织形式的描述，进程是程序的实体。</li>
<li>指在系统中正在运行的一个应用程序；程序一旦运行就是进程。</li>
<li>进程是操作系统资源分配的最小单位。</li>
</ol>
</blockquote>
<h2 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h2><blockquote>
<ol>
<li>是操作系统能够进行运算调度的最小单位。</li>
<li>包含在进程之中，是进程中的实际运作单位。</li>
<li>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</li>
<li>系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。</li>
</ol>
</blockquote>
<h2 id="一个程序至少有一个进程-一个进程至少有一个线程。"><a href="#一个程序至少有一个进程-一个进程至少有一个线程。" class="headerlink" title="一个程序至少有一个进程,一个进程至少有一个线程。"></a><strong><em>一个程序至少有一个进程,一个进程至少有一个线程。</em></strong></h2><h2 id="进程与线程区别："><a href="#进程与线程区别：" class="headerlink" title="进程与线程区别："></a>进程与线程区别：</h2><blockquote>
<ol>
<li>资源拥有：进程是cpu资源分配的最小单位，线程不拥有资源，线程可以访问隶属于进程的资源，是CPU调度的最小单位。</li>
<li>调度：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li>
<li>系统开销：进程在创建、切换和销毁时开销比较大，而线程比较小。进程创建的时候需要分配系统资源，而销毁的的时候需要释放系统资源。线程切换时只需保存和设置少量寄存器内容，开销很小。</li>
<li>通信：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</li>
<li>一个进程崩溃，不会对其他进程产生影响；而一个线程崩溃，会让同一进程内的其他线程也死掉。</li>
</ol>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表快速排序</title>
    <url>/2020/03/22/20200322_%E6%9D%82%E9%A2%98/</url>
    <content><![CDATA[<h1 id="单链表快速排序"><a href="#单链表快速排序" class="headerlink" title="单链表快速排序"></a>单链表快速排序</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>和普通快排一样，递归实现遍历。递归的每一层都遍历一遍当前的链表，将链表按照节点值分成三部分：等于枢轴值、小于枢轴值和大于枢轴值。递归排序后，将三段链表进行拼接。</p>
<h2 id="时空复杂度："><a href="#时空复杂度：" class="headerlink" title="时空复杂度："></a>时空复杂度：</h2><p>平均时间复杂度为 O(nlogn)，额外空间复杂度为 O(logn)。</p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//返回指向当前链表的尾节点指针</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">get</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next) head = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">quickSortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;<span class="comment">//头结点为空或当前只有头结点</span></span><br><span class="line">        ListNode *s = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *e = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *l = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *st = s, *et = e, *lt = l;<span class="comment">//尾指针，一直指向最后一个节点</span></span><br><span class="line">        <span class="keyword">int</span> v = head-&gt;val;<span class="comment">//枢轴值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter = head; iter != <span class="literal">nullptr</span>; iter = iter-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(iter-&gt;val &lt; v) st = st-&gt;next = iter;<span class="comment">//当前iter接到当前st后，再将st指向新末尾</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(iter-&gt;val == v) et = et-&gt;next = iter;</span><br><span class="line">            <span class="keyword">else</span> lt = lt-&gt;next = iter;</span><br><span class="line">        &#125;</span><br><span class="line">        st-&gt;next = et-&gt;next = lt-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//因为原节点指针是指向下一节点的，被取出后最后一个节点应指向空</span></span><br><span class="line">        s-&gt;next = quickSortList(s-&gt;next);</span><br><span class="line">        l-&gt;next = quickSortList(l-&gt;next);</span><br><span class="line">        <span class="built_in">get</span>(s)-&gt;next = e-&gt;next;</span><br><span class="line">        <span class="built_in">get</span>(s)-&gt;next = l-&gt;next;<span class="comment">//防止某一个为空</span></span><br><span class="line">        <span class="keyword">auto</span> res = s-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> s, e, l;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>链表</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode365.水壶问题</title>
    <url>/2020/03/21/20200321LeetCode/</url>
    <content><![CDATA[<h1 id="LeetCode365-水壶问题"><a href="#LeetCode365-水壶问题" class="headerlink" title="LeetCode365.水壶问题"></a><a href="https://leetcode-cn.com/problems/water-and-jug-problem/" target="_blank" rel="noopener">LeetCode365.水壶问题</a></h1><h2 id="这题我只会数学解法，太菜了😭"><a href="#这题我只会数学解法，太菜了😭" class="headerlink" title="这题我只会数学解法，太菜了😭"></a>这题我只会数学解法，太菜了😭</h2><p>其实第一眼没有思路，瞄了一眼标签是“数学”，就开始推公式<br>假设容量为x升的水壶进行了a次操作，容量为y升的水壶进行了b次操作，最终两水壶中的水总共是z升。可以得到公式：</p>
<script type="math/tex; mode=display">
\ a \times \ x + \ b \times \ y = z</script><p>emm，好眼熟的公式，好像是斐蜀定理。。。</p>
<h2 id="斐蜀定理"><a href="#斐蜀定理" class="headerlink" title="斐蜀定理"></a>斐蜀定理</h2><blockquote>
<p>对于任意正整数a，b，那么一定存在非零整数x，y，使得<script type="math/tex">a \times x + b \times y = gcd(a,\ b)</script></p>
</blockquote>
<p>再扩展一下，对于这道题的方程<script type="math/tex">a \times x + b \times y = z，</script><br>当且仅当<script type="math/tex">z\ |\ gcd(x,\ y)</script>时该二元不定方程才有整数解。因此这道题就可以解决了。<br>也就意味着当<script type="math/tex">x \ + \ y \ge \ z</script>时应满足：<script type="math/tex">z \ mod\  gcd(x,\ y)=0</script>，OK了。</p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canMeasureWater</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x || !y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == z || y == z) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(x + y &lt; z) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> !(z % gcd(x, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好像还有BFS的解法，打算再看一下。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数学</tag>
        <tag>斐蜀定理</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode面试题40.最小的K个数</title>
    <url>/2020/03/20/20200320LeetCode/</url>
    <content><![CDATA[<h1 id="LeetCode面试题40-最小的k个数"><a href="#LeetCode面试题40-最小的k个数" class="headerlink" title="LeetCode面试题40.最小的k个数"></a><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/" target="_blank" rel="noopener">LeetCode面试题40.最小的k个数</a></h1><h2 id="三种实现方法："><a href="#三种实现方法：" class="headerlink" title="三种实现方法："></a>三种实现方法：</h2><blockquote>
<p>快速排序：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, mid = arr[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span> i++; <span class="keyword">while</span>(arr[i] &lt; mid);</span><br><span class="line">      <span class="keyword">do</span> j--; <span class="keyword">while</span>(arr[j] &gt; mid);</span><br><span class="line">      <span class="keyword">if</span>(i &lt; j) swap(arr[i], arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(l, j, arr), quick_sort(j + <span class="number">1</span>, r, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>归并排序：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    merge_sort(i, mid, arr, temp), merge_sort(j, r, arr, temp);</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &lt;= arr[j]) temp[k++] = arr[i++];</span><br><span class="line">      <span class="keyword">else</span> temp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) temp[k++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) temp[k++] = arr[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l, k = <span class="number">0</span>; i &lt;= r; i++, k++)</span><br><span class="line">      arr[i] = temp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然鹅。。。以上两种方法都太菜了😳<br>最终解决方法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sort(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><br>Over！😂</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
