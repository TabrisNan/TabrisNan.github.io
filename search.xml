<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>编译与链接</title>
    <url>/2020/04/29/20200429_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h1><p>一个hello.c程序：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在Unix系统上，由编译器把源文件转换为目标文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -o hello hello.c</span><br></pre></td></tr></table></figure>
<p>对于上述gcc命令，不跟任何的选项的话，会默认执行预处理、编译、汇编、链接这整个过程；如果程序没有错，就会得到一个可执行文件，默认为a.out。</p>
<blockquote>
<ul>
<li>-E选项：提示编译器执行完预处理就停下来，后边的编译、汇编、链接就先不执行了。</li>
<li>-S选项：提示编译器执行完编译就停下来，不去执行汇编和链接了。</li>
<li>-c选项：提示编译器执行完汇编就停下来。</li>
</ul>
</blockquote>
<p>以上三种选项限定了编译器执行操作的停止时间，而不是单独的将某一步拎出来执行。</p>
<blockquote>
<ul>
<li><p>-o选项：输出名字的参数，指定输出的文件名；不用-o则一般会在当前文件夹下生成默认的a.out文件作为可执行程序</p>
</li>
<li><p>-O选项：对程序进行优化编译、链接，采用这个选项，整个源代码会在编译、链接过程中进行优化处理，这样产生的可执行文件的执行效率可以提高，但是，编译、链接的速度就相应地要慢一些。比如氧气优化-O2。（吸口氧，呼呼）</p>
</li>
</ul>
</blockquote>
<p>编译的整个过程如下：<br><img src="/images/编译系统.jpg" alt="alt"></p>
<blockquote>
<ul>
<li>预处理阶段(hello.c -&gt; hello.i)：预处理器（cpp）根据以字符#开头的命令，修改原始的C程序。处理包括：#include，#define，条件编译指令(#if，#ifdef…)，删除注释等内容；添加行号和文件标识名；保留所有的#pragma编译指令(留待编译器使用)</li>
<li>编译阶段(hello.i -&gt; hello.s)：翻译成汇编文件；</li>
<li>汇编阶段(hello.s -&gt; hello.o)：将汇编文件翻译成可重定位目标文件；汇编器将 hello.s 翻译成机器语言指令，把这些指令打包成一种叫做可重定位目标程序的格式，并将结果保存在目标文件 hello.o 中。 hello.o 文件是一个二进制文件，它的字节编码是机器语言指令而不是字符。</li>
<li>链接阶段(hello.o + 其他.o文件 -&gt; hello)：在本例中调用了 printf() 函数，因此需要使用链接器将重定位目标文件 hello.o 和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件（简称可执行文件，可以被加载到内存中，由系统执行）。</li>
</ul>
</blockquote>
<h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><blockquote>
<ul>
<li>库是写好的，现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库。</li>
<li>本质上来讲，库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。</li>
</ul>
</blockquote>
<h1 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h1><p>静态链接器以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件作为输出；在链接阶段，要把所有需要的函数的二进制代码都包含到可执行文件中去。</p>
<p><strong>优点：</strong></p>
<blockquote>
<ul>
<li>在可执行程序中具备了执行程序所需要的所有东西，执行时运行速度快。</li>
</ul>
</blockquote>
<p><strong>缺点：</strong></p>
<blockquote>
<ul>
<li>浪费空间：每个可执行程序对需要的目标文件都有一份副本，目标文件可能会在内存中有多个副本。</li>
<li>更新困难：每当库函数的代码被修改，就需要重新进行编译链接形成可执行程序。</li>
</ul>
</blockquote>
<p>链接器主要完成以下两个任务：</p>
<blockquote>
<ul>
<li>符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。</li>
<li>重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。</li>
</ul>
</blockquote>
<p><img src="/images/静态链接.jpg" alt="alt"></p>
<h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><p>为了解决静态链接中：空间浪费、更新困难两大问题。动态链接把程序按照模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。</p>
<p><strong>特点：</strong></p>
<blockquote>
<ul>
<li>在给定的文件系统中一个动态库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中;</li>
<li>在内存中，一个共享库的已编译程序的机器代码的一个副本可以被不同的正在运行的进程共享。</li>
<li>Linux 系统：<strong>.so</strong> 后缀;</li>
<li>Windows 系统：<strong>.DLL</strong> 后缀;</li>
</ul>
</blockquote>
<p><strong>优点：</strong></p>
<blockquote>
<ul>
<li>节省空间：因为即使所有程序都依赖都一个库，但是该库在内存中只存在一个副本。</li>
<li>更新方便：因为更新时只需要替换原来的目标文件，而无需将所有的程序再重新链接一遍。当程序下一次运行时，新版本的目标文件会自动加载到内存中并且链接起来。</li>
</ul>
</blockquote>
<p><strong>缺点：</strong></p>
<blockquote>
<ul>
<li>由于是运行时加载，可能会影响程序的前期执行性能。</li>
</ul>
</blockquote>
<p><img src="/images/动态链接.jpg" alt="alt"></p>
<h1 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h1><blockquote>
<ul>
<li>可执行目标文件：可以直接在内存中执行；</li>
<li>可重定位目标文件：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件；</li>
<li>共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接；</li>
</ul>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a><br><a href="https://blog.csdn.net/guaiguaihenguai/article/details/81160310" target="_blank" rel="noopener">编译和链接的过程</a><br><a href="https://www.cnblogs.com/alway-july/p/7953986.html" target="_blank" rel="noopener">gcc -o hello hello.c 执行过程</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>编译</tag>
        <tag>链接</tag>
        <tag>静态链接</tag>
        <tag>动态链接</tag>
      </tags>
  </entry>
  <entry>
    <title>设备管理</title>
    <url>/2020/04/28/20200428_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h1><ul>
<li><strong>盘面</strong>（Platter）：一个磁盘有多个盘面；</li>
<li><strong>磁道</strong>（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道；</li>
<li><strong>扇区</strong>（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512 bytes 与 4 K 两种大小；</li>
<li><strong>磁头</strong>（Head）：与盘面非常接近，能够将盘面上的磁场转换为电信号（读），或者将电信号转换为盘面的磁场（写）；</li>
<li><strong>制动手臂</strong>（Actuator arm）：用于在磁道之间移动磁头；</li>
<li><strong>主轴</strong>（Spindle）：使整个盘面转动。</li>
</ul>
<h1 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h1><p>读写一个磁盘块的时间的影响因素有：</p>
<blockquote>
<ul>
<li><strong>旋转时间</strong>（主轴转动盘面，使得磁头移动到适当的扇区上）</li>
<li><strong>寻道时间</strong>（制动手臂移动，使得磁头移动到适当的磁道上）</li>
<li><strong>实际的数据传输时间</strong></li>
</ul>
</blockquote>
<p>其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p>
<h2 id="1-先来先服务-FCFS-First-Come-First-Served"><a href="#1-先来先服务-FCFS-First-Come-First-Served" class="headerlink" title="1. 先来先服务(FCFS, First Come First Served)"></a>1. 先来先服务(FCFS, First Come First Served)</h2><p>按照磁盘请求的顺序进行调度。<br>优点是公平和简单。缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。</p>
<h2 id="2-最短寻道时间优先-SSTF-Shortest-Seek-Time-First"><a href="#2-最短寻道时间优先-SSTF-Shortest-Seek-Time-First" class="headerlink" title="2. 最短寻道时间优先(SSTF, Shortest Seek Time First)"></a>2. 最短寻道时间优先(SSTF, Shortest Seek Time First)</h2><p>优先调度与当前磁头所在磁道距离最近的磁道。</p>
<p>虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。</p>
<h2 id="3-电梯算法-SCAN，也称扫描算法"><a href="#3-电梯算法-SCAN，也称扫描算法" class="headerlink" title="3.电梯算法(SCAN，也称扫描算法)"></a>3.电梯算法(SCAN，也称扫描算法)</h2><p>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p>
<p>电梯算法和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。</p>
<p>因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。</p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>磁盘</tag>
        <tag>磁盘调度算法</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2020/04/27/20200427_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p>虚拟内存使得物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。虚拟内存允许执行中的进程只有部分在内存中，因此程序可以比物理内存大。而且虚拟内存将内存抽象成一个巨大的数组，将用户视界的逻辑内存与物理内存分离，使得程序员不受内存存储的限制。虚拟内存展现在程序员面前的是一个比物理内存要大得多的、地址连续的内存空间，而事实上是映射到支离破碎的物理内存，乃至磁盘上。</p>
<h1 id="分页存储管理"><a href="#分页存储管理" class="headerlink" title="分页存储管理"></a>分页存储管理</h1><p>逻辑空间分页，物理空间分块，页与块同样大，页连续块离散，用页号查页表，由硬件做转换，页面和内存块大小一般选为2的若干次幂。<br><strong>页表作用</strong>：实现从页号到物理地址的映射<br>将用户程序的逻辑地址空间分为若干个固定大小的区域，称为“页”或“页面”，典型的页面大小为1KB；相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。<br>一个虚拟地址分成两个部分，前一部分存储页面号，后一部分存储偏移量。<br>内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的<strong>页表</strong>（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。</p>
<h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1><p>在程序运行过程中，如果要访问的页面不在内存中，就会发生缺页中断，将缺页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。算法的主要目标是使页面置换频率最低（缺页率最低）。</p>
<ul>
<li><strong>最佳置换算法</strong>：所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。（理想化的，不可实现，因为无法知道一个页面多长时间不再被访问）</li>
<li><strong>最近最久未使用</strong>（<strong>LRU</strong>，Least Recently Used）：将最近最久未使用的页面换出。</li>
<li><strong>最近未使用</strong>（<strong>NRU</strong>，Not Recently Used）：有两个状态位R与M，页面被访问时置R = 1， 页面被修改时置M = 1。<br>当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。<br>NRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。</li>
<li><strong>先进先出</strong>（<strong>FIFO</strong>）：简单，但是会把经常被访问的页面换出，提高了缺页率。</li>
<li><strong>第二次机会算法</strong> （FIFO的改进）：为每个页面设置了一个访问标志位R，对该页面访问时将该位置1；需要页面置换时，检查最老页面的R值，0立即替换；1则清零后放入链表尾部，重新搜索。</li>
<li><strong>时钟</strong>（第二次机会算法的改进）：采用环形链表。</li>
</ul>
<h1 id="分段式存储管理"><a href="#分段式存储管理" class="headerlink" title="分段式存储管理"></a>分段式存储管理</h1><p>使用分页系统的一维地址空间，其动态增长的特点会出现覆盖的问题。为了使程序和数据划分开来，不出现覆盖问题而使用分段，程序和数据就在逻辑上拥有独立的地址空间。<br>分段是一种二维结构，把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。<br>段的长度由相应的逻辑信息组的长度决定，因而各段长度不等，引入分段存储管理方式的目的主要是为了满足用户（程序员）在编程和使用上多方面的要求。完整的逻辑意义信息，就是说将程序分页时，页的大小是固定的，只根据页面大小大小死生生的将程序切割开；而分段时比较灵活，只有一段程序有了完整的意义才将这一段切割开。（例如将一个人每隔50厘米切割一段，即为分页；而将一个人分割为头部、身体、腿部（有完整逻辑意义）三段，即为分段）</p>
<h1 id="段页式"><a href="#段页式" class="headerlink" title="段页式"></a>段页式</h1><p>程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。（地址空间分段，分段的基础上再分页）</p>
<h1 id="分页与分段的比较"><a href="#分页与分段的比较" class="headerlink" title="分页与分段的比较"></a>分页与分段的比较</h1><ul>
<li>对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。</li>
<li>地址空间的维度：分页是一维地址空间，分段是二维的。</li>
<li>大小是否可以改变：页的大小不可变，段的大小可以动态改变。</li>
<li>出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。</li>
</ul>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>虚拟内存</tag>
        <tag>分页</tag>
        <tag>页面置换算法</tag>
        <tag>分段</tag>
        <tag>段页</tag>
      </tags>
  </entry>
  <entry>
    <title>进程通信</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="进程通信-IPC-Inter-Process-Communication-的六种方式"><a href="#进程通信-IPC-Inter-Process-Communication-的六种方式" class="headerlink" title="进程通信(IPC, Inter Process Communication)的六种方式"></a>进程通信(IPC, Inter Process Communication)的六种方式</h1><p><strong>进程通信：进程间传输信息。</strong><br>进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。</p>
<blockquote>
<h2 id="1-管道"><a href="#1-管道" class="headerlink" title="1. 管道"></a>1. 管道</h2><blockquote>
</blockquote>
<h2 id="2-FIFO（命名管道）"><a href="#2-FIFO（命名管道）" class="headerlink" title="2. FIFO（命名管道）"></a>2. FIFO（命名管道）</h2><blockquote>
</blockquote>
<h2 id="3-消息队列"><a href="#3-消息队列" class="headerlink" title="3. 消息队列"></a>3. 消息队列</h2><blockquote>
</blockquote>
<h2 id="4-信号量"><a href="#4-信号量" class="headerlink" title="4. 信号量"></a>4. 信号量</h2><blockquote>
</blockquote>
<h2 id="5-共享储存"><a href="#5-共享储存" class="headerlink" title="5. 共享储存"></a>5. 共享储存</h2><blockquote>
</blockquote>
<h2 id="6-套接字"><a href="#6-套接字" class="headerlink" title="6. 套接字"></a>6. 套接字</h2><blockquote>
</blockquote>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程通信</tag>
      </tags>
  </entry>
  <entry>
    <title>进程同步的四种方式</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="进程同步的四种方式"><a href="#进程同步的四种方式" class="headerlink" title="进程同步的四种方式"></a>进程同步的四种方式</h1><p><strong>进程同步：控制多个进程按一定顺序执行；</strong></p>
<blockquote>
<h2 id="1-临界区"><a href="#1-临界区" class="headerlink" title="1. 临界区"></a>1. 临界区</h2><blockquote>
<p> 对临界资源进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。</p>
</blockquote>
<h2 id="2-同步与互斥"><a href="#2-同步与互斥" class="headerlink" title="2. 同步与互斥"></a>2. 同步与互斥</h2><blockquote>
<p> 同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。<br>互斥：多个进程在同一时刻只有一个进程能进入临界区。互斥对象只有一个，只有拥有互斥对象的线程才具有访问资源的权限。</p>
</blockquote>
<h2 id="3-信号量"><a href="#3-信号量" class="headerlink" title="3. 信号量"></a>3. 信号量</h2><blockquote>
<p> 信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。<br>down : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；<br>up ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。<br>down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。<br>如果信号量的取值只能为 0 或者 1，那么就成为了互斥量（Mutex） ，0 表示临界区已经加锁，1 表示临界区解锁。<br>使用信号量实现生产者-消费者问题（代码看一下）</p>
</blockquote>
<h2 id="4-管程"><a href="#4-管程" class="headerlink" title="4. 管程"></a>4. 管程</h2><blockquote>
<p> 管程可以看做一个软件模块，它是将共享的变量和对于这些共享变量的操作封装起来，形成一个具有一定接口的功能模块，进程可以调用管程来实现进程级别的并发控制。<br>管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。<br>管程引入了 条件变量 以及相关的操作：wait() 和 signal() 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。</p>
</blockquote>
</blockquote>
<h1 id="经典同步问题（代码实现）"><a href="#经典同步问题（代码实现）" class="headerlink" title="经典同步问题（代码实现）"></a>经典同步问题（代码实现）</h1><h2 id="1-哲学家进餐问题"><a href="#1-哲学家进餐问题" class="headerlink" title="1. 哲学家进餐问题"></a>1. 哲学家进餐问题</h2><h2 id="2-读者写者问题"><a href="#2-读者写者问题" class="headerlink" title="2. 读者写者问题"></a>2. 读者写者问题</h2><hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a><br><a href="https://blog.csdn.net/qq_38998213/article/details/87899231" target="_blank" rel="noopener">管程的理解</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>进程调度算法</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="进程调度算法："><a href="#进程调度算法：" class="headerlink" title="进程调度算法："></a>进程调度算法：</h1><p>根据系统的资源分配策略所规定的资源分配算法；不同的环境调度算法不同。</p>
<h2 id="1-批处理系统"><a href="#1-批处理系统" class="headerlink" title="1.批处理系统"></a>1.批处理系统</h2><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>
<blockquote>
<h3 id="1-1-先来先服务-first-come-first-serverd（FCFS）"><a href="#1-1-先来先服务-first-come-first-serverd（FCFS）" class="headerlink" title="1.1 先来先服务 first-come first-serverd（FCFS）"></a>1.1 先来先服务 first-come first-serverd（FCFS）</h3><blockquote>
<p>非抢占式的调度算法，按照请求的顺序进行调度。<br>当每个进程就绪后，它加入就绪队列。当前正运行的进程停止执行，选择在就绪队列中存在时间最长的进程运行。<br>该算法既可以用于作业调度，也可以用于进程调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p>
</blockquote>
<h3 id="1-2-短作业优先-shortest-job-first（SJF）"><a href="#1-2-短作业优先-shortest-job-first（SJF）" class="headerlink" title="1.2 短作业优先 shortest job first（SJF）"></a>1.2 短作业优先 shortest job first（SJF）</h3><blockquote>
<p>非抢占式的调度算法，按估计运行时间最短的顺序进行调度。从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。<br>长作业有可能会<strong>饿死（不是“死锁”）</strong>，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p>
</blockquote>
<h3 id="1-3-最短剩余时间优先-shortest-remaining-time-next（SRTN）"><a href="#1-3-最短剩余时间优先-shortest-remaining-time-next（SRTN）" class="headerlink" title="1.3 最短剩余时间优先 shortest remaining time next（SRTN）"></a>1.3 最短剩余时间优先 shortest remaining time next（SRTN）</h3><blockquote>
<p>抢占式的调度算法，最短作业优先的抢占式版本。当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程，否则新的进程等待。<strong>存在长进程饥饿的危险。</strong></p>
</blockquote>
</blockquote>
<h2 id="2-交互式系统"><a href="#2-交互式系统" class="headerlink" title="2.交互式系统"></a>2.交互式系统</h2><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p>
<blockquote>
<h3 id="2-1-时间片轮转"><a href="#2-1-时间片轮转" class="headerlink" title="2.1 时间片轮转"></a>2.1 时间片轮转</h3><blockquote>
<p>按 FCFS 的原则将所有就绪进程排成队列。每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。<br>算法的效率和<strong>时间片的大小</strong>有很大关系：<br>进程切换要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间；如果时间片过长，那么实时性就不能得到保证。</p>
</blockquote>
<h3 id="2-2-优先级调度"><a href="#2-2-优先级调度" class="headerlink" title="2.2 优先级调度"></a>2.2 优先级调度</h3><blockquote>
<p>为每个进程分配一个优先级，按优先级进行调度。<br>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p>
</blockquote>
<h3 id="2-3-多级反馈队列"><a href="#2-3-多级反馈队列" class="headerlink" title="2.3 多级反馈队列"></a>2.3 多级反馈队列</h3><blockquote>
<p>公认的一种较好的进程调度算法。<br>若一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。<br>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..(随着优先降低时间片变长)。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次（1 + 2 + 4 + 8 + 16 + 32 + 64 &gt; 100）。<br>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。<br>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>
</blockquote>
</blockquote>
<h2 id="3-实时系统"><a href="#3-实时系统" class="headerlink" title="3.实时系统"></a>3.实时系统</h2><blockquote>
<p>实时系统要求一个请求在一个确定时间内得到响应。<br>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a><br><a href="https://www.cnblogs.com/szitcast/p/10927375.html" target="_blank" rel="noopener">进程常用调度算法</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程调度算法</tag>
      </tags>
  </entry>
  <entry>
    <title>进程状态</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h1 id="进程状态："><a href="#进程状态：" class="headerlink" title="进程状态："></a>进程状态：</h1><blockquote>
<ul>
<li>就绪状态（Ready）：等待被调度</li>
<li>运行状态（Running）</li>
<li>阻塞状态（Waiting）：等待资源<h2 id="状态间切换要注意："><a href="#状态间切换要注意：" class="headerlink" title="状态间切换要注意："></a><strong>状态间切换要注意：</strong></h2></li>
</ul>
<ol>
<li>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。</li>
<li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。</li>
</ol>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>进程状态</tag>
      </tags>
  </entry>
  <entry>
    <title>进程与线程</title>
    <url>/2020/04/19/20200419_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F_%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%20/</url>
    <content><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h2><blockquote>
<ol>
<li>操作系统对正在运行的程序的一种抽象，程序是指令、数据及其组织形式的描述，进程是程序的实体。</li>
<li>指在系统中正在运行的一个应用程序；程序一旦运行就是进程。</li>
<li>进程是操作系统资源分配的最小单位。</li>
</ol>
</blockquote>
<h2 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h2><blockquote>
<ol>
<li>是操作系统能够进行运算调度的最小单位。</li>
<li>包含在进程之中，是进程中的实际运作单位。</li>
<li>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</li>
<li>系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。</li>
</ol>
</blockquote>
<h2 id="一个程序至少有一个进程-一个进程至少有一个线程。"><a href="#一个程序至少有一个进程-一个进程至少有一个线程。" class="headerlink" title="一个程序至少有一个进程,一个进程至少有一个线程。"></a><strong><em>一个程序至少有一个进程,一个进程至少有一个线程。</em></strong></h2><h2 id="进程与线程区别："><a href="#进程与线程区别：" class="headerlink" title="进程与线程区别："></a>进程与线程区别：</h2><blockquote>
<ol>
<li>资源拥有：进程是cpu资源分配的最小单位，线程不拥有资源，线程可以访问隶属于进程的资源，是CPU调度的最小单位。</li>
<li>调度：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li>
<li>系统开销：进程在创建、切换和销毁时开销比较大，而线程比较小。进程创建的时候需要分配系统资源，而销毁的的时候需要释放系统资源。线程切换时只需保存和设置少量寄存器内容，开销很小。</li>
<li>通信：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</li>
<li>一个进程崩溃，不会对其他进程产生影响；而一个线程崩溃，会让同一进程内的其他线程也死掉。</li>
</ol>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">CS-Notes</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表快速排序</title>
    <url>/2020/03/22/20200322_%E6%9D%82%E9%A2%98/</url>
    <content><![CDATA[<h1 id="单链表快速排序"><a href="#单链表快速排序" class="headerlink" title="单链表快速排序"></a>单链表快速排序</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>和普通快排一样，递归实现遍历。递归的每一层都遍历一遍当前的链表，将链表按照节点值分成三部分：等于枢轴值、小于枢轴值和大于枢轴值。递归排序后，将三段链表进行拼接。</p>
<h2 id="时空复杂度："><a href="#时空复杂度：" class="headerlink" title="时空复杂度："></a>时空复杂度：</h2><p>平均时间复杂度为 O(nlogn)，额外空间复杂度为 O(logn)。</p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//返回指向当前链表的尾节点指针</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">get</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next) head = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">quickSortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;<span class="comment">//头结点为空或当前只有头结点</span></span><br><span class="line">        ListNode *s = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *e = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *l = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *st = s, *et = e, *lt = l;<span class="comment">//尾指针，一直指向最后一个节点</span></span><br><span class="line">        <span class="keyword">int</span> v = head-&gt;val;<span class="comment">//枢轴值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter = head; iter != <span class="literal">nullptr</span>; iter = iter-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(iter-&gt;val &lt; v) st = st-&gt;next = iter;<span class="comment">//当前iter接到当前st后，再将st指向新末尾</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(iter-&gt;val == v) et = et-&gt;next = iter;</span><br><span class="line">            <span class="keyword">else</span> lt = lt-&gt;next = iter;</span><br><span class="line">        &#125;</span><br><span class="line">        st-&gt;next = et-&gt;next = lt-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//因为原节点指针是指向下一节点的，被取出后最后一个节点应指向空</span></span><br><span class="line">        s-&gt;next = quickSortList(s-&gt;next);</span><br><span class="line">        l-&gt;next = quickSortList(l-&gt;next);</span><br><span class="line">        <span class="built_in">get</span>(s)-&gt;next = e-&gt;next;</span><br><span class="line">        <span class="built_in">get</span>(s)-&gt;next = l-&gt;next;<span class="comment">//防止某一个为空</span></span><br><span class="line">        <span class="keyword">auto</span> res = s-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> s, e, l;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>排序算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode365.水壶问题</title>
    <url>/2020/03/21/20200321LeetCode/</url>
    <content><![CDATA[<h1 id="LeetCode365-水壶问题"><a href="#LeetCode365-水壶问题" class="headerlink" title="LeetCode365.水壶问题"></a><a href="https://leetcode-cn.com/problems/water-and-jug-problem/" target="_blank" rel="noopener">LeetCode365.水壶问题</a></h1><h2 id="这题我只会数学解法，太菜了😭"><a href="#这题我只会数学解法，太菜了😭" class="headerlink" title="这题我只会数学解法，太菜了😭"></a>这题我只会数学解法，太菜了😭</h2><p>其实第一眼没有思路，瞄了一眼标签是“数学”，就开始推公式<br>假设容量为x升的水壶进行了a次操作，容量为y升的水壶进行了b次操作，最终两水壶中的水总共是z升。可以得到公式：</p>
<script type="math/tex; mode=display">
\ a \times \ x + \ b \times \ y = z</script><p>emm，好眼熟的公式，好像是斐蜀定理。。。</p>
<h2 id="斐蜀定理"><a href="#斐蜀定理" class="headerlink" title="斐蜀定理"></a>斐蜀定理</h2><blockquote>
<p>对于任意正整数a，b，那么一定存在非零整数x，y，使得<script type="math/tex">a \times x + b \times y = gcd(a,\ b)</script></p>
</blockquote>
<p>再扩展一下，对于这道题的方程<script type="math/tex">a \times x + b \times y = z，</script><br>当且仅当<script type="math/tex">z\ |\ gcd(x,\ y)</script>时该二元不定方程才有整数解。因此这道题就可以解决了。<br>也就意味着当<script type="math/tex">x \ + \ y \ge \ z</script>时应满足：<script type="math/tex">z \ mod\  gcd(x,\ y)=0</script>，OK了。</p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canMeasureWater</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x || !y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == z || y == z) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(x + y &lt; z) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> !(z % gcd(x, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好像还有BFS的解法，打算再看一下。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数学</tag>
        <tag>斐蜀定理</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode面试题40.最小的K个数</title>
    <url>/2020/03/20/20200320LeetCode/</url>
    <content><![CDATA[<h1 id="LeetCode面试题40-最小的k个数"><a href="#LeetCode面试题40-最小的k个数" class="headerlink" title="LeetCode面试题40.最小的k个数"></a><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/" target="_blank" rel="noopener">LeetCode面试题40.最小的k个数</a></h1><h2 id="三种实现方法："><a href="#三种实现方法：" class="headerlink" title="三种实现方法："></a>三种实现方法：</h2><blockquote>
<p>快速排序：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, mid = arr[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span> i++; <span class="keyword">while</span>(arr[i] &lt; mid);</span><br><span class="line">      <span class="keyword">do</span> j--; <span class="keyword">while</span>(arr[j] &gt; mid);</span><br><span class="line">      <span class="keyword">if</span>(i &lt; j) swap(arr[i], arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(l, j, arr), quick_sort(j + <span class="number">1</span>, r, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>归并排序：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    merge_sort(i, mid, arr, temp), merge_sort(j, r, arr, temp);</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &lt;= arr[j]) temp[k++] = arr[i++];</span><br><span class="line">      <span class="keyword">else</span> temp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) temp[k++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) temp[k++] = arr[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l, k = <span class="number">0</span>; i &lt;= r; i++, k++)</span><br><span class="line">      arr[i] = temp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然鹅。。。以上两种方法都太菜了😳<br>最终解决方法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sort(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><br>Over！😂</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
